### Generate the seed
Use a password-based key derivation function (PBKDF2) to create the seed.

Bonus security: you can set an optional passphrase to be included in the salt. (Defaults to empty string.)

salt = "mnemonic" # + passphrase (optional)

from hashlib import pbkdf2_hmac
seed = pbkdf2_hmac(
   "sha512", 
   mnemonic_string.encode("utf-8"), 
   salt.encode("utf-8"), 
   2048
)

print(seed)
# b"\xf8\xb7W}\xba\x02Wx\xb9\xbf$\xf8..."

print(len(seed))
# 64 (bytes, i.e. 512 bits)

print(seed.hex())
# Behold: your seed!

### Start with a seed
# BIP 32 picks up where BIP 39 left off - with a 512-bit seed:

seed = 'fffcf9f6f3f0edeae7e4e1dedbd8d5d2cfccc9c6c3c0bdbab7b4b1aeaba8a5a29f9c999693908d8a8784817e7b7875726f6c696663605d5a5754514e4b484542'
# Derive the master private key and chain code
import binascii
import hmac
import hashlib

# the HMAC-SHA512 `key` and `data` must be bytes:
seed_bytes = binascii.unhexlify(seed)

I = hmac.new(b'Bitcoin seed', seed_bytes, hashlib.sha512).digest()
L, R = I[:32], I[32:]

master_private_key = int.from_bytes(L, 'big')
master_chain_code = R

print(f'master private key (hex): {hex(master_private_key)}')
print(f'master chain code (bytes): {master_chain_code}')

# Derive the root key (extended private key)
import base58

VERSION_BYTES = {
    'mainnet_public': binascii.unhexlify('0488b21e'),
    'mainnet_private': binascii.unhexlify('0488ade4'),
    'testnet_public': binascii.unhexlify('043587cf'),
    'testnet_private': binascii.unhexlify('04358394'),
}

version_bytes = VERSION_BYTES['mainnet_private']
depth_byte = b'\x00'
parent_fingerprint = b'\x00' * 4
child_number_bytes = b'\x00' * 4
key_bytes = b'\x00' + L

all_parts = (
    version_bytes,      # 4 bytes  
    depth_byte,         # 1 byte
    parent_fingerprint, # 4 bytes
    child_number_bytes, # 4 bytes
    master_chain_code,  # 32 bytes
    key_bytes,          # 33 bytes
)

all_bytes = b''.join(all_parts)
root_key = base58.b58encode_check(all_bytes).decode('utf8')
print(f'root key: {root_key}')

Some elliptic curve utility functions
You can't escape math.

from ecdsa import SECP256k1
from ecdsa.ecdsa import Public_key

SECP256k1_GEN = SECP256k1.generator

def serialize_curve_point(p):
   x, y = p.x(), p.y()
   if y & 1:
      return b'\x03' + x.to_bytes(32, 'big')
   else:
      return b'\x02' + x.to_bytes(32, 'big')

def curve_point_from_int(k):
   return Public_key(SECP256k1_GEN, SECP256k1_GEN * k).point
Define a fingerprint function
A fingerprint is four bytes - a link between child and parent keys.

from ecdsa import SECP256k1
from ecdsa.ecdsa import Public_key

SECP256k1_GEN = SECP256k1.generator

def fingerprint_from_priv_key(k):
    K = curve_point_from_int(k)
    K_compressed = serialize_curve_point(K)
    identifier = hashlib.new(
      'ripemd160',
      hashlib.sha256(K_compressed).digest(),
    ).digest()
    return identifier[:4]
Define the child key derivation function
SECP256k1_ORD = SECP256k1.order

def derive_ext_private_key(private_key, chain_code, child_number):
    if child_number >= 2 ** 31:
        # Generate a hardened key
        data = b'\x00' + private_key.to_bytes(32, 'big')
    else:
        # Generate a non-hardened key
        p = curve_point_from_int(private_key)
        data = serialize_curve_point(p)

    data += child_number.to_bytes(4, 'big')

    hmac_bytes = hmac.new(chain_code, data, hashlib.sha512).digest()
    L, R = hmac_bytes[:32], hmac_bytes[32:]

    L_as_int = int.from_bytes(L, 'big')
    child_private_key = (L_as_int + private_key) % SECP256k1_ORD
    child_chain_code = R

    return (child_private_key, child_chain_code)
Run the child key derivation function once per path depth
We're deriving keys for the account at the "default" path: m/44'/60'/0'/0/0.

# Break each depth into integers (m/44'/60'/0'/0/0)
#    e.g. (44, 60, 0, 0, 0)
# If hardened, add 2*31 to the number:
#    e.g. (2**31 + 44, 2**31 + 60, 2**31 + 0, 0, 0)
path_numbers = (2147483692, 2147483708, 2147483648, 0, 0)

depth = 0
parent_fingerprint = None
child_number = None
private_key = master_private_key
chain_code = master_chain_code

for i in path_numbers:
    depth += 1
    print(f"depth: {depth}")
    
    child_number = i
    print(f"child_number: {child_number}")
    
    parent_fingerprint = fingerprint_from_priv_key(private_key)
    print(f"parent_fingerprint: {parent_fingerprint}")
    
    private_key, chain_code = derive_ext_private_key(private_key, chain_code, i)
    print(f"private_key: {private_key}")
    print(f"chain_code: {chain_code}\n")

Derive the extended private key
version_bytes = VERSION_BYTES['mainnet_private']
depth_byte = depth.to_bytes(1, 'big')
child_number_bytes = child_number.to_bytes(4, 'big')
key_bytes = b'\x00' + private_key.to_bytes(32, 'big')

all_parts = (
    version_bytes,      # 4 bytes  
    depth_byte,         # 1 byte
    parent_fingerprint, # 4 bytes
    child_number_bytes, # 4 bytes
    chain_code,         # 32 bytes
    key_bytes,          # 33 bytes
)
all_bytes = b''.join(all_parts)
extended_private_key = base58.b58encode_check(all_bytes).decode('utf8')
print(f'xprv: {extended_private_key}')
xprv: xprvA2vDkmMuK1Ae2eF92xyQpn6qZzHoGTnV5hXrBw7UExUTXeMFTZDLF7cRD6vhR785RMF2EC6mAo3ojRqFEUU8VxTSzGq1jvmXSBTxoCGSSVG
Nailed it! Now, for more practical purposes, we'll need a public address and a private key.

# Display the private key
print(f'private key: {hex(private_key)}')
private key: 0x3c4cf049f83a5870ab31c396a0d46783c3e3974da1364ea5a2477548d36b5f8f
Derive the public key
# Derive the public key Point:
p = curve_point_from_int(private_key)
print(f'Point object: {p}\n')

# Serialize the Point, p
public_key_bytes = serialize_curve_point(p)

print(f'public key (hex): 0x{public_key_bytes.hex()}')
